// include stepper library
#include <AccelStepper.h>
#include <Stepper.h>
#include <FreqCounter.h>
#include <MsTimer2.h>
#include "QuickStats.h"


AccelStepper stepper(1, 8, 9);                                           // Define a stepper and the pins it will use
const int stepsPerRevolution = 400;                                      // for the motor. Nema34 motor has 200 steps in 360 degrees rotation (HW34-506 motor)
const int fullrev = 400;                                                // steps in a full revolution for the turntable
int halfrev = (fullrev/2);                                               // steps in half a revolution

int POS;                                                                 // position variable, holds most recent position reached
int lastPOS;
char flag;                                                               // flag?

char rainflag;                                                           // 0 = no rain, 1 = raining (if raining, add 180 degrees to position, see lines 40 and 54)
char x;                                                                  // for counting your # of frequency readings, for averaging
char i;                                                                  // for counting up to 10 position adjustments before zeroing out your turntable

int total;                                                               // variable for the running total of frequencies, resets after averaging them out
int avg;                                                                 // running average of frequencies, uses the total above                                                   
long int frq;                                                            // your frequency reading in the getFreq() function
long int lastfrq;                                                        // your last frequency reading, used to calculate your total
float previousTime;                                                      // used in your timing functions. (previous time - current time = time elapsed)

int reading;                                                             // stores your frequency, adjusted for a 0:360 range
int theta;                                                               // your angular position, in terms of degrees (0:360)
                                                                         // includes appropriate vector math for dealing with wind dir.
float table[10] = {};
int stddev;
float windAvgX;                                                          // averaged X component of wind vector
float windAvgY;                                                          // averaged Y component of wind vector

QuickStats stats;

void setup()
{
  stepper.setMaxSpeed(30);                                               // self explanatory (in steps per second)
  stepper.setAcceleration(10);                                           // self explanatory (use 10 (steps*s^-2) for a standardized 45 steps to decelerate to zero)
  Serial.begin(9600);                                                    // activates serial interface
  pinMode(10, OUTPUT);                                                   // set pin 10 as output (pin 10 connects to ENABLE+ pin on stepper driver, necessary to operate motor)
  digitalWrite(10, HIGH);                                                // set pin 10 to logic HIGH (to ENABLE your stepper driver)
}
void forward()                                                           // your function for moving the turntable forwards
{
  rainflag = 0;                                                          // for testing purposes, delete later
  if (rainflag == 0)                                                     // if its not raining
  {
    Serial.print(", forward: good conditions, ");                        // skip to end of function
  }  
  if (rainflag == 1)                                                     // if its raining
  {
    Serial.print(", forward: precipitating");                            // offset your POS to be 180 degrees away from intended POS
    if (theta<180)
    {
      POS -= halfrev;
    }
    if (theta>180)
    {
      POS += halfrev;     
    }                                         
  }    
  if (POS - lastPOS > halfrev)
  {
    POS = POS - fullrev; 
    Serial.println(" ");
    Serial.print(" adjusted steps away from zero: ");    
    Serial.print(POS);
    delay(200);
  }                                                           
  stepper.moveTo(POS);                                                   // move towards your position value
  Serial.println(" ");
  while (stepper.currentPosition() != (POS))                             // constant speed towards your POS, until a certain number of steps from it (here, 45 steps away)
                                                                         // 45 is used because at our speed and acceleration, the table decelerates to zero in 45 steps. just for convenience.
                                                                         // speed & acceleration can be modified, # steps has to be modified as well. can write a function to do this math.
    {
      stepper.run();                                                     // run until 40 steps away from zero
    }
  stepper.stop();                                                        // stop as fast as possible
  Serial.println("past stop");
  stepper.runToPosition();                                               // run to POS
  Serial.print("done");                                                 
  delay(100);
  lastPOS = POS;
}
void getFreq() 
{
  total = 0;
  for (x=0;x<10;x++)
    {
    FreqCounter::f_comp= 8;                                              // Set compensation to 12
    FreqCounter::start(100);                                             // Start counting with gatetime of 1s
    while (FreqCounter::f_ready == 0)                                    // wait until counter ready
 
    frq=FreqCounter::f_freq;                                             // read result
    
      /*if (frq = 0 || frq < 100 || frq > 460)
      {
        //frq = lastfrq;
      }
    */
    total = frq + total;                                                 // add result to running total
    
    
    lastfrq = frq;
    Serial.print("frq is ");                                          
    Serial.println(frq);                                                 // print result
    Serial.print("total is ");
    Serial.println(total);
    frq = table[x];
    wait();                                                              // call wait function for _____ ms wait period
    }
  stddev = (stats.stdev(table,10));                                      // get a standard deviation
  Serial.println(stddev);
  delay(3000);
  frq = total/10;                                                        // get an average frq reading using your total
  memset(table, 0, 10);
  if (stddev > 5)
  {
    wait();
    getFreq();
  }
}
void wait()
{ 
 Serial.println("waiting");
 previousTime = millis();
 while (millis() - previousTime < 2000) {};                              // while 2000 ms haven't passed since function commenced, do nothing
 if((millis() - previousTime) > 2000) 
 {                                                                       // if 2000 ms have passed since function commenced, do following
   x++;
   previousTime = millis();                                              // reset your previousTime value again
   Serial.print(x);
 }
}
void getAngle()
{ 
    frq -= 100;                                                          // subtract 100 from your frequency (the range was 100:460)
    reading = frq;                                                       // set reading as your adjusted frq value
    Serial.print("your reading, b/w 0 and 360, is ");
    Serial.println(reading);                                             // print reading
    delay(100);

    // convert reading to radians
    float theta = reading / 180.0 * PI;                                  // convert reading to radians
    delay(100);

    // running average? possible here
    windAvgX = cos(theta);                                               // get X & Y components
    windAvgY = sin(theta);
    Serial.print("AvgX, radians ");
    Serial.println(windAvgX);         
    delay(100);
    Serial.print("AvgY, radians ");
    Serial.println(windAvgY);
    delay(100);

    // get the result in degrees
    theta =  atan2(windAvgY, windAvgX) / PI * 180;                       // convert back to degrees
    delay(100);
    Serial.print(theta);
    Serial.println(", before conversion.");
    delay(100);

                                                                         // result is -180 to 180. change this to 0-360.
    if (theta < 0) theta += 360;
    delay(100);
    Serial.print(theta);
    Serial.println(", after conversion.");
  Serial.println(theta);
  delay(200);
  POS = theta*fullrev/360;                                                  // convert POS in degrees into POS in # of steps
  Serial.println(" ");
  Serial.print(" steps away from zero: ");
  Serial.println(POS);
  Serial.println(" ");
  delay(200);
} 
void loop() 
{
  for (i = 0; i < 11; i++)                                              // run this specific loop x10
  {
    getFreq();                                                          // get your average frequency reading
    total = 0;                                                          // reset the total of your frq readings to be 0
    getAngle();                                                         // get your angular POS, based on your frq reading
    forward();                                                          // moves turntable to appropriate position, depending on weather
  }
  //zero();                                                             // function that zeroes out your turntable, after above loop runs x10
}
